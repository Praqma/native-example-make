version: 2
jobs:
  build:
    docker:
      - image: circleci/golang:latest
    working_directory: ~/sheeeng/omed-make
    steps:
      - checkout
      - run:
          name: Interpolating Environment Variables to Set Other Environment Variables
          # If you need to interpolate other environment variables to set an environment variable, the only place to do this at the moment is in bash.
          # CircleCI 2.0 automatically sets a $BASH_ENV variable to a random name in /tmp, and will source this file for each step.
          # https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables
          command: |
            echo 'export DEBIAN_FRONTEND=noninteractive' >> $BASH_ENV
            echo 'export PROJECT_DIR=${PWD}/native-app' >> $BASH_ENV
            echo 'export OUTPUT_DIR=${PWD}/out' >> $BASH_ENV
            ls -al ${PWD}
            ls -al ${PROJECT_DIR}
            ls -al ${OUTPUT_DIR}
      - run:
          name: Update & Upgrade
          command: |
            set -x
            sudo apt-get update
            sudo apt-get upgrade
      - run:
          name: Setup Make Prerequisites
          command: |
            set -x
            echo "Setup Make Prerequisites ..."
            sudo apt-get install --yes build-essential
            gcc --version
      - run:
          name: Make
          command: 'make'
      - run:
          name: Make Shared Library
          command: 'make -f sharedlib.makefile'
      - run:
          name: Make Static Library
          command: 'make -f staticlib.makefile'
      - run:
          name: Run
          command: '${OUTPUT_DIR}/bin/main a b c'
      - store_artifacts:
          path: ${OUTPUT_DIR}
      - store_artifacts:
          path: ${OUTPUT_DIR}/bin
          destination: biny
      - store_artifacts:
          path: ${OUTPUT_DIR}/lib
          destination: liby
  test:
    docker:
      - image: circleci/golang:latest
    working_directory: ~/sheeeng/omed-make
    steps:
      - checkout
      - run:
          name: Interpolating Environment Variables to Set Other Environment Variables
          # If you need to interpolate other environment variables to set an environment variable, the only place to do this at the moment is in bash.
          # CircleCI 2.0 automatically sets a $BASH_ENV variable to a random name in /tmp, and will source this file for each step.
          # https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables
          command: |
            echo 'export DEBIAN_FRONTEND=noninteractive' >> $BASH_ENV
            echo 'export PROJECT_DIR=${PWD}/omed-app' >> $BASH_ENV
            echo 'export OUTPUT_DIR=${PWD}/out' >> $BASH_ENV
            ls -al ${PWD}
            ls -al ${PROJECT_DIR}
            ls -al ${OUTPUT_DIR}
      - run:
          name: Update & Upgrade
          command: |
            set -x
            sudo apt-get update
            sudo apt-get upgrade
      - run:
          name: Setup Make Prerequisites
          command: |
            set -x
            echo "Setup Make Prerequisites ..."
            sudo apt-get install --yes build-essential
            gcc --version
      - run:
          name: Make
          command: 'make test'
      - run:
          name: Test using Catch
          command: |
            set -x
            ${OUTPUT_DIR}/bin/test --durations yes --reporter compact --out ${OUTPUT_DIR}/bin/results_compact.txt
            ${OUTPUT_DIR}/bin/test --durations yes --reporter console --out ${OUTPUT_DIR}/bin/results_console.txt
            ${OUTPUT_DIR}/bin/test --durations yes --reporter junit --out ${OUTPUT_DIR}/bin/results_junit.xml
            ${OUTPUT_DIR}/bin/test --durations yes --reporter xml --out ${OUTPUT_DIR}/bin/results_xml.xml
      - store_artifacts:
          path: ${OUTPUT_DIR}/bin
      - store_artifacts:
          path: ${OUTPUT_DIR}/bin
          destination: biny
workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
          filters:
            branches:
              only: master
